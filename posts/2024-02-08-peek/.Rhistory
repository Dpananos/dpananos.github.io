import numpy as np
import matplotlib.pyplot as plt
reticulate::repl_python()
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
n
N <- ceiling(n * 1:10/10)
N
map_dbl(N, ~{
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
samples <- rnorm(1000000, log_rr_mean, log_rr_sd)
# expectation from truncated normal
log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
})
map_dbl(N, ~{
n <- .x
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
samples <- rnorm(1000000, log_rr_mean, log_rr_sd)
# expectation from truncated normal
log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
})
b <- map_dbl(N, ~{
n <- .x
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
samples <- rnorm(1000000, log_rr_mean, log_rr_sd)
# expectation from truncated normal
log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
})
plot(N, b)
plot(N, b - log_rr_mean)
source("~/.active-rstudio-document", echo=TRUE)
plot(N, (b - log_rr_mean)/log_rr_mean, type='l')
reticulate::repl_python()
library(tidyverse)
set.seed(2)
pc <- 0.1
lift <-1.03
pt <- pc * lift
power <- 0.8
sig_level <- 0.05
pwr_calc <- power.prop.test(p1=pc, p2=pt, power=power, sig.level = sig_level)
n <- ceiling(pwr_calc$n)
N <- ceiling(n * 1:100/100)
b <- map_dbl(N, ~{
n <- .x
1/sqrt(n) * dnorm(z)/(1-pnorm(z))
})
plot(N, (b - log_rr_mean)/log_rr_mean, type='l')
library(tidyverse)
set.seed(2)
pc <- 0.1
lift <-1.03
pt <- pc * lift
power <- 0.8
sig_level <- 0.05
pwr_calc <- power.prop.test(p1=pc, p2=pt, power=power, sig.level = sig_level)
n <- ceiling(pwr_calc$n)
N <- ceiling(n * 1:100/100)
b <- map_dbl(N, ~{
n <- .x
1/sqrt(n) * dnorm(z)/(1-pnorm(z))
})
plot(N, b, type='l')
n
library(tidyverse)
set.seed(2)
pc <- 0.1
lift <-1.03
pt <- pc * lift
power <- 0.8
sig_level <- 0.05
pwr_calc <- power.prop.test(p1=pc, p2=pt, power=power, sig.level = sig_level)
n <- ceiling(pwr_calc$n)
N <- ceiling(n * 1:100/100)
b <- map_dbl(N, ~{
n <- .x
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
samples <- rnorm(1000000, log_rr_mean, log_rr_sd)
# expectation from truncated normal
log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
})
plot(N, b - log_rr_mean)
n
scales::comma(n)
scales::comma(2*n)
N
N <- seq(20000, n, 20000)
N
N <- c(c(20000, n, 20000), n)
N
N <- c(seq(20000, n, 20000), n)
N
n <- N
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
# expectation from truncated normal
log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
# expectation from truncated normal
trunc <- log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
plot(N, trunc - log_rr_mean)
reticulate::repl_python()
library(tidyverse)
set.seed(2)
pc <- 0.1
lift <-1.03
pt <- pc * lift
power <- 0.8
sig_level <- 0.05
pwr_calc <- power.prop.test(p1=pc, p2=pt, power=power, sig.level = sig_level)
N <- ceiling(pwr_calc$n)
reticulate::repl_python()
n <- c(seq(20000, n, 20000), N)
pnorm(0)
reticulate::repl_python()
n <- c( seq(20000, N, 20000), N)
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
# expectation from truncated normal
trunc <- log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
plot(n, (trunc - log_rr_mean) / trunc, type='l')
z
reticulate::repl_python()
n <- c( seq(20000, N, 20000), N)
log_rr_mean <- log(pt) - log(pc)
log_rr_var <- (1-pt)/(pt*n) + (1-pc)/(pc*n)
log_rr_sd <- sqrt(log_rr_var)
z = log_rr_mean - log_rr_sd * qnorm(0.8)
# expectation from truncated normal
trunc <- log_rr_mean + log_rr_sd * dnorm((z - log_rr_mean)/ log_rr_sd) / (1 - pnorm((z - log_rr_mean)/ log_rr_sd))
plot(n, (trunc - log_rr_mean) / trunc, type='l')
reticulate::repl_python()
(trunc - log_rr_mean) / trunc
trunc
reticulate::repl_python()
#| echo: false
library(tidyverse)
set.seed(2)
pc <- 0.1
lift <-1.03
pt <- pc * lift
power <- 0.8
sig_level <- 0.05
pwr_calc <- power.prop.test(p1=pc, p2=pt, power=power, sig.level = sig_level)
N <- ceiling(pwr_calc$n)
reticulate::repl_python()
